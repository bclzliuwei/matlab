function [Channelstr s dataraw data]=ReadComtrade(strpath,strfile,datlen)
%% 
% *************************************************************************
% Comtrade Reader function
% This file is designed to decode the data stored in COMTRADE format,
% as defined in IEEE C37.111-1999. This involves the opening of two files,
% one containing the configuration (.cfg) information and the other
% the data (.dat).
%
% COMTRADE provides a common format for the data files and exchange medium
% needed for the interchange of various types of fault, test, or simulation
% data.
% *************************************************************************

%% 
% -------------------------------------------------------------------------
% open the comtrade files & extract the data
% read_comtrade(filename)
% Imports data from the specified file
% filename:  files to read <filename>.cfg and <filename>.dat
% Auto-generated by MATLAB on 12-Jul-2007 13:45:45
% Use the uigetfile function to load the .cfg file, which is then used to
% load the associated .dat file
% First, get the .cfg file information
% disp('Read comtrade')
% -------------------------------------------------------------------------

if nargin==0
    [CfgFileName,Path] = uigetfile('*.cfg');
    strpath = Path;
    if strpath(end) ~= '\'
        strpath=strcat(strpath,'\');
    end
    strfile = CfgFileName;
else
    if strpath(end)~='\'
         strpath=strcat(strpath,'\');
    end
    CfgFileName=strfile;
    Path=strpath;
end
PathAndCfgName = [Path CfgFileName];

% -------------------------------------------------------------------------
% Derive the .dat file string
% -------------------------------------------------------------------------
CfgFileName = upper(CfgFileName);
DatFileName = strrep(CfgFileName, '.CFG', '.dat');
PathAndDatName =[Path DatFileName];

% -------------------------------------------------------------------------
% Now open the .cfg and .dat files
% -------------------------------------------------------------------------
cfg_id = fopen(PathAndCfgName);
dat_id = fopen(PathAndDatName);

% -------------------------------------------------------------------------
% Scan the text into local cells cfg and dat.
% For the .cfg file generate 15*1 cell array, actually only one cell
% For the .dat file generate N*1 cell array, actually only one cell, where
% N stands for signallength
% -------------------------------------------------------------------------
cfg = textscan(cfg_id, '%s', 'delimiter', '\n');
dat = textscan(dat_id, '%s', 'delimiter', '\n');

% -------------------------------------------------------------------------
% Close all opened files
% -------------------------------------------------------------------------
fclose(cfg_id);
fclose(dat_id);

% -------------------------------------------------------------------------
% Start to decode the data
% -------------------------------------------------------------------------
cfg_len = length(cfg{1,1});
cfg_string = cell(size(cfg));
filetype='BINARY';
for i = 1:cfg_len
    temp_string = char(cfg{1,1}{i});
    cfg_string(i) = textscan(temp_string, '%s', 'Delimiter', ',')';
    if strcmp(temp_string,'ASCII')
        filetype='ASCII';
    end
end

% -------------------------------------------------------------------------
% Comtrade file station name - is the name of the substation location
% -------------------------------------------------------------------------
Title = char(cfg_string{1,1}(1));

% -------------------------------------------------------------------------
% Comtrade version - is the year of the standard revision, e.g. 1999
% -------------------------------------------------------------------------
if length(cfg_string{1,1}) < 3 
    Version = '1999';
else
    Version = char(cfg_string{1,1}(3));
end

% -------------------------------------------------------------------------
% Channel information - total analogue and digital channels
% -------------------------------------------------------------------------
No_Ch = strread(char(cfg_string{1,2}(1)));
Ana_Ch = strread(char(cfg_string{1,2}(2)));
Dig_Ch = strread(char(cfg_string{1,2}(3)));

% -------------------------------------------------------------------------
% The actual data channel begins from the third line
% -------------------------------------------------------------------------
Channelstr(1:(No_Ch)) = cfg_string(3:(No_Ch+2));

% -------------------------------------------------------------------------
% Nominal frequency
% -------------------------------------------------------------------------
frequency = strread(char(cfg_string{1,3+No_Ch}(1)));

% -------------------------------------------------------------------------
% Sampling rate
% -------------------------------------------------------------------------
try     
samp_rate = strread(char(cfg_string{1,5+No_Ch}(1)));
catch
    samp_rate = 1000000;
end

% -------------------------------------------------------------------------
% Record start date and time
% -------------------------------------------------------------------------
start_date = char(cfg_string{1,6+No_Ch}(1));
start_time = char(cfg_string{1,6+No_Ch}(1));

% -------------------------------------------------------------------------
% Record end date and time
% -------------------------------------------------------------------------
end_date = char(cfg_string{1,7+No_Ch}(1));
end_time = char(cfg_string{1,7+No_Ch}(1));


for i = 1 : No_Ch
    j = i + 2;

    var_string{i} = char(textscan(char(cfg_string{1,j}(2)),'%c')); 
    if ~isletter(var_string{i}(1))
    % ---------------------------------------------------------------------
    % If the first character is not a letter, replace with an 'x'. This is
    % to satisfy the naming requirements for the workspace.
    % ---------------------------------------------------------------------
        var_string{i}(1) = 'x';
    end
end

% -------------------------------------------------------------------------
% Write the remainaing config information to the workspace
% -------------------------------------------------------------------------
s = struct('Path', Path, 'Filename', CfgFileName,...
    'Title',Title,...
    'Version',Version,...
    'Total_Channels',No_Ch,...
    'Analogue_Channels',Ana_Ch,...
    'Digital_Channels',Dig_Ch,...
    'Frequency',frequency,...
    'Sample_rate',samp_rate,...
    'Start_date',start_date,...
    'Start_time',start_time,...
    'End_date',end_date,...
    'End_time',end_time,...
    'DataType',filetype);
% assignin('base','config', (cfg_string'));

% -------------------------------------------------------------------------
% Now let's post-process the data to produce the final waveforms
% -------------------------------------------------------------------------
% hold off;
formatstr='%g, %g';
for i=1:(No_Ch)
    formatstr=strcat(formatstr,', %g');
end
dat_id = fopen(PathAndDatName);
if strcmp(filetype,'ASCII')
    if nargin==2
        data = fscanf(dat_id, formatstr, [(No_Ch+2) inf]);    % It has two rows now.
    else
        data = fscanf(dat_id, formatstr, [(No_Ch+2) datalen]);    % It has two rows now.
    end
    data=data';
else
    [A,COUNT]=fread(dat_id,inf,'bit16');
    if Dig_Ch==0
        for i=1:Ana_Ch
            data(:,i)=A((4+i):(Ana_Ch+4):end);
        end
    else
        for i=1:Ana_Ch
            if i==15
                i=i;
            end
            data(:,i)=A((4+i):(Ana_Ch+5):end);
        end
        tmp=A((4+1+Ana_Ch):(Ana_Ch+5):end);
        tmp=GetBinary(tmp);
        Tmp=zeros(length(tmp(:,1)),Dig_Ch);
        Tmp(:,1:length(tmp(1,:)))=tmp;
        data=[data Tmp];
    end
    Tmp=(1:length(data(:,1)))*500-500;
    data=[Tmp' data];
    Tmp=1:length(data(:,1));
    data=[Tmp' data];   
end
fclose(dat_id);
dataraw=data;

if Ana_Ch >= 1



    % step through the data configuration
    for i = 1 : Ana_Ch

        j = i + 2;

        % Limit the range of the result
        min_level = strread(char(cfg_string{1,j}(9)));
        max_level = strread(char(cfg_string{1,j}(10)));

        % The value is scaled by the equation [aX + b]
        multiplier = strread(char(cfg_string{1,j}(6))); % a
        offset = strread(char(cfg_string{1,j}(7)));     % b

        % Lower limit check

        data(:,j) = min_level.*(data(:,j)<min_level)+data(:,j).*(data(:,j)>=min_level);
        data(:,j) = max_level.*(data(:,j)>max_level)+data(:,j).*(data(:,j)<=max_level);



        if (length(cfg_string{1,j})<11)
            data(:,j) = (data(:,j) * multiplier  + offset(1));
        else
            data(:,j) = (data(:,j) * multiplier(1)  + offset(1))*strread(char(cfg_string{1,j}(11)));
        end



        % If the Primary and Secondary scaling information is present,
        % apply that too
        if length(cfg_string{1,j}) > 10

            pri_scaling = strread(char(cfg_string{1,j}(11)));
            sec_scaling = strread(char(cfg_string{1,j}(12)));
            pri_sec = char(cfg_string{1,j}(13));

            if pri_sec == 'P'

                data(:,j) = data(:,j) * pri_scaling;

            else

                data(:,j) = data(:,j) * sec_scaling;

            end
        end

    end
end



